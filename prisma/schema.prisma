// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  CASHIER
  COURIER
  CUSTOMER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
}

model Store {
  id           String         @id @default(cuid())
  name         String
  slug         String         @unique
  address      String?
  phone        String?
  email        String?
  openingHours String?        // JSON string
  currency     String         @default("MAD")
  taxRate      Float          @default(0.2)
  deliveryFee  Float          @default(15.0)
  createdAt    DateTime       @default(now())
  zones        DeliveryZone[]
  categories   Category[]
  products     Product[]
  clients      Client[]
  orders       Order[]
  coupons      Coupon[]
  campaigns    Campaign[]
}

model DeliveryZone {
  id       String  @id @default(cuid())
  storeId  String
  name     String
  minOrder Float   @default(0)
  fee      Float
  eta      Int     // minutes
  store    Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  clients  Client[]
  orders   Order[]
}

model Category {
  id          String    @id @default(cuid())
  storeId     String
  name        String
  description String?
  position    Int       @default(0)
  visible     Boolean   @default(true)
  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  products    Product[]
}

model Product {
  id          String      @id @default(cuid())
  storeId     String
  categoryId  String
  title       String
  description String?
  price       Float
  compareAt   Float?
  sku         String?
  stock       Int         @default(0)
  images      String?     // JSON array
  tags        String?     // comma separated
  options     String?     // JSON
  addons      String?     // JSON
  available   Boolean     @default(true)
  store       Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
}

model Client {
  id      String        @id @default(cuid())
  storeId String
  name    String
  phone   String
  email   String?
  address String?
  zoneId  String?
  store   Store         @relation(fields: [storeId], references: [id], onDelete: Cascade)
  zone    DeliveryZone? @relation(fields: [zoneId], references: [id])
  orders  Order[]
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  ON_THE_WAY
  DELIVERED
  CANCELLED
}

enum DeliveryMethod {
  DELIVERY
  PICKUP
}

model Order {
  id             String         @id @default(cuid())
  storeId        String
  clientId       String?
  status         OrderStatus    @default(PENDING)
  subtotal       Float
  discount       Float          @default(0)
  deliveryFee    Float          @default(0)
  tax            Float          @default(0)
  total          Float
  notes          String?
  deliveryMethod DeliveryMethod @default(DELIVERY)
  zoneId         String?
  createdAt      DateTime       @default(now())
  store          Store          @relation(fields: [storeId], references: [id], onDelete: Cascade)
  client         Client?        @relation(fields: [clientId], references: [id])
  zone           DeliveryZone?  @relation(fields: [zoneId], references: [id])
  items          OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  title     String
  price     Float
  qty       Int
  options   String? // JSON
  addons    String? // JSON
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

enum CouponType {
  PERCENT
  FIXED
}

model Coupon {
  id         String     @id @default(cuid())
  storeId    String
  code       String     @unique
  type       CouponType
  value      Float
  startsAt   DateTime?
  endsAt     DateTime?
  minOrder   Float      @default(0)
  usageLimit Int?
  usedCount  Int        @default(0)
  store      Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model Campaign {
  id       String    @id @default(cuid())
  storeId  String
  message  String
  startsAt DateTime
  endsAt   DateTime
  pages    String?   // JSON array of page paths
  store    Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model BlogPost {
  id          String    @id @default(cuid())
  slug        String    @unique
  title       String
  excerpt     String?
  content     String
  publishedAt DateTime?
  author      String    @default("Admin")
  createdAt   DateTime  @default(now())
}

model NewsletterSubscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}